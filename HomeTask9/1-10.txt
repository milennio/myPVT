1	ЧТО ТАКОЕ ООП
ООП - методология программирования, основанная на представлении программного продукта в виде совокупности объектов, каждый из которых является экземпляром конкретного класса. ООП использует в качестве базовых элементов взаимодействие объектов.

2	ЧТО ТАКОЕ ОБЪЕКТ
Объект - именнованная модель реальной сущности, обладающая конкретными значениями свойств и проявляющая свое поведение, обладающий именем набор данных (полей и свойств объекта), физически находящихся в памяти компьютера, и методов, имеющих доступ к ним. Объект -конкретный экземпляр класса.

3	ЧТО ТАКОЕ КЛАСС
КЛАССОВ называется описание совокупности объектов с общими атрибутами, методами, отношениями и семантикой.
Классы определяют структуру и поведение некоторого набора элементов предметной области, для которой разрабатывается программная модель.

4	ЧТО ТАКОЕ КОНСТРУКТОР
КОНСТРУКТОР - это метод, который автоматически вызывается при создании обхекта класса и выполняет действия только по инициализации объекта.
- К. имеет то же имя, что и класс.
- Вызывается не по имени, а только вместе с ключевым словом new при создании экземпляра класса.
- К. не возвращает значение, но может иметь параметры и быть перегружаемым.

5	ИСПОЛЬЗОВАНИЯ ОПЕРАТОРА THIS
Для вызова тела одного конструктора из другого первым оператором вызывающего конструктора дб оператор this([args])

6	УСТРОЙСТВО ПАМЯТИ JAVA
Память в java условно можно разделить на 2 части: stack (стек) и heap (куча).
Java Heap (куча) используется Java Runtime для выделения памяти под объекты и JRE классы. Создание нового объекта также происходит в куче. Здесь работает сборщик мусора: освобождает память путем удаления объектов, на которые нет каких-либо ссылок. Любой объект, созданный в куче, имеет глобальный доступ и на него могут ссылаться из любой части приложения.
Stack память в Java
Стековая память в Java работает по схеме LIFO (Последний-зашел-Первый-вышел). Всякий раз, когда вызывается метод, в памяти стека создается новый блок, который содержит примитивы и ссылки на другие объекты в методе. Как только метод заканчивает работу, блок также перестает использоваться, тем самым предоставляя доступ для следующего метода.
Размер стековой памяти намного меньше объема памяти в куче.

7	СБОРЩИК МУСОРА (GARBAGE COLLECTOR)
Сборщик мусора - это низкоприоритетный процесс, который запускается периодически и освобождает память, использованную объектами, которые больше не нужны.
JVM обычно запускает сборщик мусора при низком уровне свободной памяти. Но работа сборщика мусора не гарантирует, что всегда будет оставаться достаточно свободной памяти.

8	КАК ВЫЗВАТЬ GC
Вы можете запросить запуск сборщика мусора, но вы не можете принудительно задавать это действие. Для запроса можно вызвать один из следующих методов:

- System.gc()
- Runtime.getRuntime().gc()

При удалении из памяти объектов, некоторым аналогом является метод finalize(), в тело которого помещается код по освобождению занятых объектом ресурсов.
Виртуальная машина станет вызывать его каждый раз, когда сборщик мусора
будет уничтожать объект класса, которому не соответствует ни одна ссылка.

9	СТРУКТУРА КУЧИ
• Eden Space (heap) – в этой области выделятся память под все создаваемые из программы объекты. Большая часть объектов живет недолго (итераторы, временные объекты, используемые внутри методов и т.п.), и удаляются при выполнении сборок мусора это области памяти, не перемещаются в другие области памяти. Когда данная область заполняется (т.е. количество выделенной памяти в этой области превышает некоторый заданный процент), GC выполняет быструю (minor collection) сборку мусора. По сравнению с полной сборкой мусора она занимает мало времени, и затрагивает только эту область памяти — очищает от устаревших объектов Eden Space и перемещает выжившие объекты в следующую область. 
• Survivor Space (heap) – сюда перемещаются объекты из предыдущей, после того, как они пережили хотя бы одну сборку мусора. Время от времени долгоживущие объекты из этой области перемещаются в Tenured Space.
• Tenured (Old) Generation (heap) — Здесь скапливаются долгоживущие объекты (крупные высокоуровневые объекты, синглтоны, менеджеры ресурсов и проч.). Когда заполняется эта область, выполняется полная сборка мусора (full, major collection), которая обрабатывает все созданные JVM объекты.
• Permanent Generation (non-heap) – Здесь хранится метаинформация, используемая JVM (используемые классы, методы и т.п.). В частноси Code Cache (non-heap), где кешируется скомпилированный платформенно — зависимый код.

10	Первый принцип ООП:
Инкапсуляция (англ. encapsulation, от лат. in capsula) —упаковка данных и методов в единый компонент.

Основой инкапсуляции в Java является класс. В классе описаны данные и код некоторого набора объектов этого класса, которые могут быть созданы впоследствии.

При составлении класса код и данные необходимо специфицировать. Переменные экземпляра класса являются данными. Методы  класса – это код, оперирующий данными.

Цель класса – инкапсуляция (сокрытие). Для этого у методов и переменных внутри класса могут быть модификаторы доступа 

